# -*- coding: utf-8 -*-
"""Transfer_learning_on_ptato_disease .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12TjLJSQiD3WIiPOUPY73VZvDr9e3_iAL
"""

import tensorflow as tf
from tensorflow.keras.layers import Convolution2D, MaxPooling2D, Flatten,Dense,Dropout
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import Adam

dir='/content/drive/MyDrive/potato-dataset'

batch_size = 32
img_size = 224

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  dir,
  validation_split=0.25,
  subset="training",
  seed=123,
  image_size=(img_size, img_size),
  batch_size=batch_size)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  dir,
  validation_split=0.25,
  subset="validation",
  seed=123,
  image_size=(img_size, img_size),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(18, 14))
for images, labels in train_ds.take(1):
  for i in range(25):
    ax = plt.subplot(5, 5, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

"""## Model-Building"""

resnet_model = Sequential()
pretrained_model = tf.keras.applications.ResNet50(
    include_top = False,
    input_shape = (224,224,3),
    classes = 3,
    weights = 'imagenet')
for layer in pretrained_model.layers:
  layer.trainable = False

resnet_model.add(pretrained_model)
resnet_model.add(Flatten())
resnet_model.add(Dense(units = 3,activation = 'softmax'))

resnet_model.summary()

resnet_model.compile(optimizer=Adam(learning_rate=0.001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history = resnet_model.fit(train_ds,validation_data=val_ds,epochs=5)

# loss
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# accuracies
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

from tensorflow.keras.preprocessing import image
def classify(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)

    img_array = np.expand_dims(img_array, axis=0)
    result = resnet_model.predict(img_array)

    label = class_names[np.argmax(result)]
    return label

prediction = classify('/content/drive/MyDrive/potato-dataset/Potato___Late_blight/0051e5e8-d1c4-4a84-bf3a-a426cdad6285___RS_LB 4640.JPG')
print(prediction)

